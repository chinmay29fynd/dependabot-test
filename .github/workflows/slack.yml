name: Dependabot PR Alerts

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: read
  security-events: read

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GIT_PAT }}
          alert-lookup: true
          compat-lookup: true
          
      - name: Get vulnerabilities this PR fixes
        id: pr-vulnerabilities
        run: |
          # Get the package names being updated (split by comma if multiple)
          PACKAGE_NAMES="${{ steps.dependabot-metadata.outputs.dependency-names }}"
          
          # Check if dependabot metadata already found a security alert
          ALERT_STATE="${{ steps.dependabot-metadata.outputs.alert-state }}"
          GHSA_ID="${{ steps.dependabot-metadata.outputs.ghsa-id }}"
          CVSS_SCORE="${{ steps.dependabot-metadata.outputs.cvss }}"
          
          echo "Alert state from metadata: $ALERT_STATE"
          echo "GHSA ID from metadata: $GHSA_ID"
          echo "CVSS from metadata: $CVSS_SCORE"
          
          # If dependabot metadata found a security alert, use that
          if [ "$ALERT_STATE" = "OPEN" ] && [ ! -z "$GHSA_ID" ]; then
            echo "Using security alert from dependabot metadata"
            echo "vulnerability-count=1" >> $GITHUB_OUTPUT
            echo "ghsa-ids=$GHSA_ID" >> $GITHUB_OUTPUT
            echo "cvss-scores=$CVSS_SCORE" >> $GITHUB_OUTPUT
            echo "vulnerability-details<<EOF" >> $GITHUB_OUTPUT
            echo "• $CVSS_SCORE/10: Security vulnerability ($GHSA_ID)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Found 1 vulnerability from dependabot metadata"
          else
            # Fallback: Get Dependabot alerts for this repository
            ALERTS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GIT_PAT }}" \
              "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts")
            
            # Convert comma-separated package names to array and check each one
            IFS=',' read -ra PACKAGE_ARRAY <<< "$PACKAGE_NAMES"
            
            ALL_VULNERABILITIES=""
            TOTAL_VULNERABILITIES=0
            ALL_GHSA_IDS=""
            ALL_CVSS_SCORES=""
            
            for PACKAGE in "${PACKAGE_ARRAY[@]}"; do
              # Trim whitespace
              PACKAGE=$(echo "$PACKAGE" | xargs)
              
              # Get vulnerabilities for this specific package
              PACKAGE_ALERTS=$(echo "$ALERTS_RESPONSE" | jq -r --arg pkg "$PACKAGE" \
                '.[] | select(.security_vulnerability.package.name == $pkg and .state == "open")')
              
              if [ ! -z "$PACKAGE_ALERTS" ]; then
                # Get vulnerability details for this package
                PACKAGE_VULNERABILITIES=$(echo "$PACKAGE_ALERTS" | jq -r \
                  '"• \(.security_vulnerability.severity): \(.security_vulnerability.summary) (\(.security_vulnerability.vulnerable_version_range) → \(.security_vulnerability.first_patched_version))"')
                
                # Count vulnerabilities for this package
                PACKAGE_COUNT=$(echo "$PACKAGE_ALERTS" | jq -r '.security_vulnerability.severity' | wc -l)
                
                # Get GHSA IDs for this package
                PACKAGE_GHSA_IDS=$(echo "$PACKAGE_ALERTS" | jq -r '.security_vulnerability.ghsa_id' | tr '\n' ', ' | sed 's/,$//')
                
                # Get CVSS scores for this package
                PACKAGE_CVSS_SCORES=$(echo "$PACKAGE_ALERTS" | jq -r '.security_vulnerability.cvss.score' | tr '\n' ', ' | sed 's/,$//')
                
                # Add to totals
                TOTAL_VULNERABILITIES=$((TOTAL_VULNERABILITIES + PACKAGE_COUNT))
                ALL_VULNERABILITIES="$ALL_VULNERABILITIES$PACKAGE_VULNERABILITIES"
                
                if [ ! -z "$PACKAGE_GHSA_IDS" ]; then
                  if [ ! -z "$ALL_GHSA_IDS" ]; then
                    ALL_GHSA_IDS="$ALL_GHSA_IDS, $PACKAGE_GHSA_IDS"
                  else
                    ALL_GHSA_IDS="$PACKAGE_GHSA_IDS"
                  fi
                fi
                
                if [ ! -z "$PACKAGE_CVSS_SCORES" ]; then
                  if [ ! -z "$ALL_CVSS_SCORES" ]; then
                    ALL_CVSS_SCORES="$ALL_CVSS_SCORES, $PACKAGE_CVSS_SCORES"
                  else
                    ALL_CVSS_SCORES="$PACKAGE_CVSS_SCORES"
                  fi
                fi
                
                echo "Found $PACKAGE_COUNT vulnerabilities for package: $PACKAGE"
              fi
            done
            
            echo "vulnerability-count=$TOTAL_VULNERABILITIES" >> $GITHUB_OUTPUT
            echo "ghsa-ids=$ALL_GHSA_IDS" >> $GITHUB_OUTPUT
            echo "cvss-scores=$ALL_CVSS_SCORES" >> $GITHUB_OUTPUT
            echo "vulnerability-details<<EOF" >> $GITHUB_OUTPUT
            echo "$ALL_VULNERABILITIES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "Found $TOTAL_VULNERABILITIES total vulnerabilities being fixed"
            echo "Vulnerability details:"
            echo "$ALL_VULNERABILITIES"
          fi
          
      - name: Notify Slack about Dependabot PR
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#test-dep-bot'
          text: |
            🚨 *Dependabot Security Update*
            
            *Repository:* ${{ github.repository }}
            *PR Number:* #${{ github.event.pull_request.number }}
            *Branch:* ${{ github.event.pull_request.head.ref }}
            
            *📦 Dependencies Updated:*
            ${{ steps.dependabot-metadata.outputs.dependency-names }}
            
            *🔧 Update Details:*
            • *Type:* ${{ steps.dependabot-metadata.outputs.dependency-type }}
            • *Update Type:* ${{ steps.dependabot-metadata.outputs.update-type || 'Version update' }}
            • *Package Ecosystem:* ${{ steps.dependabot-metadata.outputs.package-ecosystem }}
            • *Directory:* ${{ steps.dependabot-metadata.outputs.directory }}
            • *Target Branch:* ${{ steps.dependabot-metadata.outputs.target-branch }}
            
            * Version Changes:*
            • *From:* ${{ steps.dependabot-metadata.outputs.previous-version || 'N/A' }}
            • *To:* ${{ steps.dependabot-metadata.outputs.new-version || 'N/A' }}
            
            *🛡️ Vulnerabilities This PR Fixes:*
            ${{ steps.pr-vulnerabilities.outputs.vulnerability-count != '0' && format('🚨 *{0} vulnerabilities being fixed*', steps.pr-vulnerabilities.outputs.vulnerability-count) || '🛡️ *No direct vulnerabilities detected*' }}
            ${{ steps.pr-vulnerabilities.outputs.ghsa-ids && format('• *GHSA IDs:* {0}', steps.pr-vulnerabilities.outputs.ghsa-ids) || '• *GHSA IDs:* Not available' }}
            ${{ steps.pr-vulnerabilities.outputs.cvss-scores && format('• *CVSS Scores:* {0}', steps.pr-vulnerabilities.outputs.cvss-scores) || '• *CVSS Scores:* Not available' }}
            
            ${{ steps.pr-vulnerabilities.outputs.vulnerability-count != '0' && '*Vulnerability Details:*' || '' }}
            ${{ steps.pr-vulnerabilities.outputs.vulnerability-details }}
            
            *📈 Compatibility:*
            ${{ steps.dependabot-metadata.outputs.compatibility-score && steps.dependabot-metadata.outputs.compatibility-score != '0' && format('• *Compatibility Score:* {0}', steps.dependabot-metadata.outputs.compatibility-score) || '• *Compatibility Score:* Not available' }}
            
            *📋 Summary:*
            Updates ${{ steps.dependabot-metadata.outputs.dependency-names }} to fix ${{ steps.pr-vulnerabilities.outputs.vulnerability-count }} security vulnerabilities and improve dependency health.
            
            <${{ github.event.pull_request.html_url }}|View Dependabot PR>
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 